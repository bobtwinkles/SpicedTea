package tk.sirtwinkles.spicedtea.state;

import java.util.HashMap;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.GL11;
import com.badlogic.gdx.graphics.GLCommon;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.g2d.BitmapFont;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.utils.Array;
import com.badlogic.gdx.utils.OrderedMap;

import tk.sirtwinkles.spicedtea.GameSpicedTea;
import tk.sirtwinkles.spicedtea.Globals;
import tk.sirtwinkles.spicedtea.input.InputQueue;

public class TextDisplayState implements GameState {
	private static OrderedMap<String, Object> texts;
	private static BitmapFont bmf = new BitmapFont(false);
	private static OrthographicCamera cam = new OrthographicCamera(800, 600);
	
	static {
		cam.translate(-400, -300);
		cam.update();
	}
	
	private String textKey;
	private PlayingState tr;
	
	private boolean inputEvent;

	public TextDisplayState(String textKey, PlayingState tr) {
		this.textKey = textKey;
		this.inputEvent = false;
		this.tr = tr;
	}

	@Override
	public void onEnterState(GameSpicedTea game) {
		if (!Globals.assets.isLoaded("data/config/texts.json")) {
			Globals.assets.load("data/config/texts.json", String.class);
		}
		Gdx.gl10.glClearColor(0.1f, 0.1f, 0.1f, 1.0f);
	}

	@Override
	public void onLeaveState(GameSpicedTea game) {
	}

	@Override
	public boolean switchState(GameSpicedTea game) {
		return inputEvent;
	}

	@Override
	public void render(GameSpicedTea game) {
		if (texts != null) {
			SpriteBatch sb = game.getContext().getBatch();
			sb.setProjectionMatrix(cam.projection);
			sb.setTransformMatrix(cam.view);
			
			Gdx.gl.glClear(GL11.GL_COLOR_BUFFER_BIT);
			
			sb.begin();
			
			Array<String> str = (Array<String>) texts.get(textKey);
			for (int i = str.size - 1; i >= 0; --i) {
				bmf.draw(sb, str.get(i), 0, i * -10 + 10);
			}
			
			sb.end();
		}
	}

	@Override
	public void tick(GameSpicedTea game) {
		if (texts == null) {
			if (Globals.assets.isLoaded("data/config/texts.json")) {
			texts = (OrderedMap<String, Object>) Globals.json
					.parse((String) Globals.assets
							.get("data/config/texts.json"));
			} else {
				Globals.assets.update();
			}
		}

		InputQueue iq = game.getInput();
		inputEvent = inputEvent || iq.getKeyEvents().size() != 0
				|| iq.getTouchEvents().size() != 0;
		iq.clearQueues();
		inputEvent = false;
	}

	@Override
	public GameState getNextState(GameSpicedTea game) {
		return tr;
	}

}
