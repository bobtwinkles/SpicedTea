package tk.sirtwinkles.spicedtea.state;

import tk.sirtwinkles.spicedtea.GameSpicedTea;
import tk.sirtwinkles.spicedtea.Globals;
import tk.sirtwinkles.spicedtea.input.InputQueue;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.GL11;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.BitmapFont;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.utils.Array;
import com.badlogic.gdx.utils.OrderedMap;

public class TextDisplayState implements GameState {
	private static OrderedMap<String, Object> texts;
	private static BitmapFont bmf = new BitmapFont(true);
	private static final int WIDTH = 800;
	private static final int HEIGHT = 600;
	private static final int GUI_TILE_SIZE = 8;
	private static final int GUI_DRAW_SIZE = 64;
	private static OrthographicCamera cam = new OrthographicCamera();
	
	static {
		cam.setToOrtho(true, WIDTH, HEIGHT);
		cam.update();
	}
	
	private String textKey;
	private PlayingState tr;
	private int offset;
	private int maxOffset;
	private Texture gui;
	private boolean inputEvent;

	public TextDisplayState(String textKey, PlayingState tr) {
		this.textKey = textKey;
		this.inputEvent = false;
		this.tr = tr;
		this.gui = Globals.assets.get("data/gui.png");
	}

	@Override
	public void onEnterState(GameSpicedTea game) {
		if (!Globals.assets.isLoaded("data/config/texts.json")) {
			Globals.assets.load("data/config/texts.json", String.class);
		}
		Gdx.gl10.glClearColor(0.1f, 0.1f, 0.1f, 1.0f);
	}

	@Override
	public void onLeaveState(GameSpicedTea game) {
	}

	@Override
	public boolean switchState(GameSpicedTea game) {
		return inputEvent && offset == maxOffset;
	}

	@Override
	public void render(GameSpicedTea game) {
		if (texts != null) {
			SpriteBatch sb = game.getContext().getBatch();
			sb.setProjectionMatrix(cam.projection);
			sb.setTransformMatrix(cam.view);
			
			Gdx.gl.glClear(GL11.GL_COLOR_BUFFER_BIT);
			
			sb.begin();
			
			final int width = GUI_DRAW_SIZE * 9;
			final int height = GUI_DRAW_SIZE * 6;
			final int xbase = (int) ((WIDTH / 2) - (width / 2));
			final int ybase = (int) ((HEIGHT / 2) - (height / 2));

			//Draw corners.
			drawTile(sb, xbase - GUI_DRAW_SIZE, ybase - GUI_DRAW_SIZE, 0, 0);
			drawTile(sb, xbase - GUI_DRAW_SIZE, ybase + height, 0, 2);
			drawTile(sb, xbase + width, ybase - GUI_DRAW_SIZE, 1, 3);
			drawTile(sb, xbase + width, ybase + height, 1, 5);
			//Draw vertical thingies
			for (int y = 0; y < height; y += GUI_DRAW_SIZE) {
				drawTile(sb, xbase - GUI_DRAW_SIZE, ybase + y, 0, 1);
				drawTile(sb, xbase + width, ybase + y, 1, 4);
			}
			//Draw horizontal thingies
			for (int x = 0; x < width; x += GUI_DRAW_SIZE) {
				if (x != width - GUI_DRAW_SIZE) {
					drawTile(sb, xbase + x, ybase - GUI_DRAW_SIZE, 1, 0);
					drawTile(sb, xbase + x, ybase + height, 1, 2);
				} else {
					drawTile(sb, xbase + x, ybase - GUI_DRAW_SIZE, 0, 3);
					drawTile(sb, xbase + x, ybase + height, 0, 5);
				}
			}
			//Draw center
			for (int x = 0; x < width; x += GUI_DRAW_SIZE) {
				for (int y = 0; y < height; y += GUI_DRAW_SIZE) {
					if (x != width - GUI_DRAW_SIZE) {
						drawTile(sb, xbase + x, ybase + y, 1, 1);
					} else {
						drawTile(sb, xbase + x, ybase + y, 0, 4);
					}
				}
			}
			
			//Draw text
			Array<String> str = (Array<String>) texts.get(textKey);
			for (int i = 0; i < str.size; ++i) {
				if (i * 20 - offset < 0) {
					continue;
				}
				if (i * 20 - offset > height - 10) {
					continue;
				}
				bmf.draw(sb, str.get(i), 112, i * 20 + 112 - offset);
			}
			
			this.maxOffset = str.size * 20 - height;
			
			//Draw scroll handle
			drawTile(sb, xbase + width - 40, ybase + (int)(offset * 5.0 * GUI_DRAW_SIZE / (maxOffset - 8)), 2, 3);
			
			sb.end();
		}
	}

	@Override
	public void tick(GameSpicedTea game) {
		if (texts == null) {
			if (Globals.assets.isLoaded("data/config/texts.json")) {
			texts = (OrderedMap<String, Object>) Globals.json
					.parse((String) Globals.assets
							.get("data/config/texts.json"));
			} else {
				Globals.assets.update();
			}
		}

		InputQueue iq = game.getInput();
		inputEvent = inputEvent || iq.getKeyEvents().size() != 0
				|| iq.getTouchEvents().size() != 0;
		iq.clearQueues();
		inputEvent = false;
		//++offset;
		if (offset > maxOffset) {
			offset = maxOffset;
		}
		if (offset < 0) {
			offset = 0;
		}
	}

	@Override
	public GameState getNextState(GameSpicedTea game) {
		return tr;
	}

	private void drawTile(SpriteBatch batch, int x, int y, int tx, int ty) {
		batch.draw(gui, x, y, GUI_DRAW_SIZE, GUI_DRAW_SIZE, tx * GUI_TILE_SIZE,
				ty * GUI_TILE_SIZE, GUI_TILE_SIZE, GUI_TILE_SIZE, false, true);
	}

}
