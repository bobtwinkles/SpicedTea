package tk.sirtwinkles.spicedtea.world.gen.dungeon.carve;

import tk.sirtwinkles.spicedtea.world.gen.dungeon.Direction;
import static tk.sirtwinkles.spicedtea.MathUtils.random;
import static tk.sirtwinkles.spicedtea.world.gen.TileSetProvider.FLOOR;
import static tk.sirtwinkles.spicedtea.world.gen.TileSetProvider.BACKGROUND;

public class FeatureCorridor extends Feature {
	public static final int WIDTH = 3;

	@Override
	public boolean generate(int x, int y, int[][] data, Direction dir) {
		int mSize = (data.length > data[0].length) ? data.length
				: data[0].length;
		int length = random.nextInt(mSize);
		switch (dir) {
		case N:
			if (test(x - 1, y - 1, WIDTH + 1, length + 1, data, BACKGROUND) <= WIDTH + 2) {
				fill(x, y, WIDTH, length, data, FLOOR);
				break;
			}
			return false;
		case E:
			if (test(x - 1, y - 1, length + 1, WIDTH + 1, data, BACKGROUND) <= WIDTH + 2) {
				fill(x, y, length, WIDTH, data, FLOOR);
				break;
			}
			return false;
		case S:
			if (test(x - 1, y - length - 1, WIDTH + 1, length + 1, data, BACKGROUND) <= WIDTH + 2) {
				fill(x, y - length, WIDTH, length, data, FLOOR);
				break;
			}
			return false;
		case W:
			System.out.println(test(x - length - 1, y - 1, length + 1, WIDTH + 1, data, BACKGROUND));
			if (test(x - length - 1, y - 1, length + 1, WIDTH + 1, data, BACKGROUND) <= WIDTH + 2) {
				fill(x - length, y, length, WIDTH, data, FLOOR);
				break;
			}
			return false;
		}
		return true;
	}
}
